security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            two_factor:
                enable_csrf: true
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'
            form_login:
                username_parameter: "email"
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
            custom_authenticators:
                - App\Security\GoogleAuthenticator
                - App\Security\FacebookAuthenticator 
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        # Routes de Oauth2
        - { path: ^/connect, requires_channel: https }
        - { path: ^/oauth, requires_channel: https }

        # Routes publiques
        - { path: ^/event$, roles: PUBLIC_ACCESS }
        - { path: ^/event/\d+$, roles: PUBLIC_ACCESS }
        - { path: ^/discover, roles: PUBLIC_ACCESS }
        - { path: ^/details, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }
        
        # Routes protégées
        - { path: ^/event/new, roles: ROLE_USER }
        - { path: ^/event/\d+/edit, roles: ROLE_USER }
        - { path: ^/event/\d+/delete, roles: ROLE_USER }
        - { path: ^/event/\d+/participate, roles: ROLE_USER }
        
        # Routes 2FA
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
